#!/usr/bin/env node
const fs = require('fs')
const isHyper = require('is-hyper')()
const debug = require('debug')('hyperlayout')

// Read json file
const readJson = (dir, file) => JSON.parse(fs.readFileSync(`${dir}/${file}`, 'utf8'))

// Get config file by reading `.hyperlayout` and `package.json`
const getConfig = () => {
  let config

  const flag = process.argv[2]
  const isGlobal = flag === 'global' || flag === 'g'
  const presetName = isGlobal ? process.argv[3] : flag

  if (isGlobal) {
    debug('Global configuration forced')
  } else {
    try {
      const subConfig = readJson(process.cwd(), '.hyperlayout')
      config = config || subConfig
    } catch (err) {
      debug('No .hyperlayout found in directory')
    }
    try {
      const {hyperlayout} = readJson(process.cwd(), 'package.json')
      config = config || hyperlayout
    } catch (err) {
      debug('No package.json found in directory')
    }
  }
  try {
    const subConfig = readJson(process.env.HOME, '.hyperlayout')
    config = config || subConfig
  } catch (err) {
    debug('No .hyperlayout found in home directory')
  }

  if (config) {
    // Check if command is given
    if (presetName) {
      const preset = config[presetName]
      if (preset) {
        config = preset
      } else {
        console.log(`Can't find preset "${presetName}"`)
        return 'error'
      }
    } else if (config.default) {
      config = config.default
    }
  }

  if (config instanceof Array) {
    config = {
      entry: 'tab',
      layout: config
    }
  }

  if (config && !config.layout) {
    console.log(`Can't find layout inside config`)
    return
  }
  return config
}

function start() {
  if (!isHyper) {
    console.log('You need to use Hyper.app to run this command')
    return
  }

  const data = {
    config: getConfig(),
    cwd: process.cwd()
  }

  if (!data.config) {
    console.log(`Can't find any hyperlayout preset (.hyperlayout, package.json, ~./hyperlayout)`)
    return
  } else if (data.config.layout === 'error') {
    return
  }

  console.log('[hyperlayout config]:' + JSON.stringify(data))
}

start()
