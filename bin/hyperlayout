#!/usr/bin/env node
const fs = require('fs')
const io = require('socket.io-client')
const isHyper = require('is-hyper')()
const debug = require('debug')('hyperlayout')

const command = process.argv[2]

// Read json file
const readJson = (dir, file) => JSON.parse(fs.readFileSync(`${dir}/${file}`, 'utf8'))

// Get config file by reading `.hyperlayout` and `package.json`
const getConfig = presetName => {
  let config
  try {
    const subConfig = readJson(process.cwd(), '.hyperlayout')
    config = config || subConfig
  } catch (err) {
    debug('No .hyperlayout found in directory')
  }
  try {
    const {hyperlayout} = readJson(process.cwd(), 'package.json')
    config = config || hyperlayout
  } catch (err) {
    debug('No package.json found in directory', err)
  }
  try {
    const subConfig = readJson(process.env.HOME, '.hyperlayout')
    config = config || subConfig
  } catch (err) {
    debug('No .hyperlayout found in home directory')
  }

  if (config) {
    // Check if command is given
    if (presetName) {
      const preset = config[presetName]
      if (preset) {
        config = preset
      } else {
        console.log(`Can't find preset "${presetName}"`)
        return 'error'
      }
    } else if (config.default) {
      config = config.default
    }
  }

  if (config instanceof Array) {
    config = {
      entry: 'tab',
      layout: config
    }
  }
  if (config && !config.layout) {
    console.log(`Can't find layout inside config`)
    return
  }
  return config
}

function start() {
  if (!isHyper) {
    console.log('You need to use Hyper.app to run this command')
    return
  }

  const config = getConfig(command)

  if (!config) {
    console.log(`Can't find any hyperlayout preset (.hyperlayout, package.json, ~./hyperlayout)`)
    return
  } else if (config === 'error') {
    return
  }

  const socket = io('http://localhost:7150')
  socket.on('ready', () => {
    socket.emit('hyperlayout', process.cwd(), config)
  })

  socket.on('received', () => {
    console.log('hyperlayout activated')
    socket.close()
  })

  socket.on('connect_error', () => {
    console.log(`Can't connect to plugin. Is hyperlayout installed in Hyper.app?`)
    socket.close()
  })
}

start()
